iqrCutoff <- 0.5
bcrAblOrNegIqr <- apply(exprs(bcrAblOrNeg), 1, IQR)
selected <- bcrAblOrNegIqr > iqrCutoff
## Drop those that are on the Y chromosome
## because there is an imbalance of men and women by group
chrN <- mget(featureNames(bcrAblOrNeg), envir=hgu95av2CHR)
onY <- sapply(chrN, function(x) any(x=="Y"))
onY[is.na(onY)] <- FALSE
selected <- selected & !onY
nsFiltered <- bcrAblOrNeg[selected, ]
numNsWithDups <- length(featureNames(nsFiltered))
nsFilteredIqr <- bcrAblOrNegIqr[selected]
uniqGenes <- findLargest(featureNames(nsFiltered), nsFilteredIqr,"hgu95av2")
nsFiltered <- nsFiltered[uniqGenes, ]
numSelected <- length(featureNames(nsFiltered))
##set up some colors
BCRcols = ifelse(nsFiltered$mol == subsetType, "goldenrod", "skyblue")
cols = brewer.pal(10, "RdBu")
## Define gene universe based on results of non-specific filtering
affyUniverse <- featureNames(nsFiltered)
entrezUniverse <- unlist(mget(affyUniverse, hgu95av2ENTREZID))
if (any(duplicated(entrezUniverse)))
stop("error in gene universe: can't have duplicate Entrez Gene Ids") > ## Also define an alternate universe based on the entire chip
chipAffyUniverse <- featureNames(bcrAblOrNeg)
chipEntrezUniverse <- mget(chipAffyUniverse, hgu95av2ENTREZID)
> chipEntrezUniverse <- unique(unlist(chipEntrezUniverse))
## Define gene universe based on results of non-specific filtering
affyUniverse <- featureNames(nsFiltered)
entrezUniverse <- unlist(mget(affyUniverse, hgu95av2ENTREZID))
if (any(duplicated(entrezUniverse)))
stop("error in gene universe: can't have duplicate Entrez Gene Ids") > ## Also define an alternate universe based on the entire chip
chipAffyUniverse <- featureNames(bcrAblOrNeg)
chipEntrezUniverse <- mget(chipAffyUniverse, hgu95av2ENTREZID)
chipEntrezUniverse <- unique(unlist(chipEntrezUniverse))
## Define gene universe based on results of non-specific filtering
affyUniverse <- featureNames(nsFiltered)
entrezUniverse <- unlist(mget(affyUniverse, hgu95av2ENTREZID))
if (any(duplicated(entrezUniverse)))
stop("error in gene universe: can't have duplicate Entrez Gene Ids")
## Also define an alternate universe based on the entire chip
chipAffyUniverse <- featureNames(bcrAblOrNeg)
chipEntrezUniverse <- mget(chipAffyUniverse, hgu95av2ENTREZID)
chipEntrezUniverse <- unique(unlist(chipEntrezUniverse))
ttestCutoff <- 0.05
ttests = rowttests(nsFiltered, "mol.biol")
smPV = ttests$p.value < ttestCutoff
pvalFiltered <- nsFiltered[smPV, ]
selectedEntrezIds <- unlist(mget(featureNames(pvalFiltered),hgu95av2ENTREZID))
View(ttests)
resultList <- lapply(lisOfParamObjs, hyperGTest)
d=2
3=4
update.packages(checkBuilt=TRUE)
version
packageStatus()
?install.packages
source("http://bioconductor.org/biocLite.R")
biocLite('edgeR')
source("http://bioconductor.org/biocLite.R")
biocLite('edgeR')
biocLite('ctc')
biocLite('Biobase')
install.packages("gplots")
install.packages('ape')
biocLite('goseq')
?DESeq
library("DESeq2")
?DESeq
library(harbin)
harbin.quant()
harbin.quant()
harbin.quant()
x <-rep(1:10, each =3)
y <- rnorm(30, mean=4,sd=1)
#Loop to get standard deviation from data
sd.y = NULL
for(i in 1:10){
sd.y[i] <- sd(y[(1+(i-1)*3):(3+(i-1)*3)])
}
sd.y<-rep(sd.y,each = 3)
#Loop to get mean from data
mean.y = NULL
for(i in 1:10){
mean.y[i] <- mean(y[(1+(i-1)*3):(3+(i-1)*3)])
}
mean.y<-rep(mean.y,each = 3)
#Put together the data to view it so far
data <- cbind(x, y, mean.y, sd.y)
#Make an empty matrix to fill with shrunk data
data.1 = matrix(data = NA, nrow=10, ncol = 4)
colnames(data.1) <- c("X","Y","MEAN","SD")
#Loop to put data into shrunk format
for(i in 1:10){
data.1[i,] <- data[(1+(i-1)*3),]
}
#Create atomic vectors for arrows
x <- data.1[,1]
mean.exp <- data.1[,3]
sd.exp <- data.1[,4]
#Plot the data
plot(x, mean.exp, ylim = range(c(mean.exp-sd.exp,mean.exp+sd.exp)))
abline(h = 4)
arrows(x, mean.exp-sd.exp, x, mean.exp+sd.exp, length=0.05, angle=90, code=3)
?sapply
echo "hello"
echo "hello"
print "hello"
a=2
a + 2
?args
?arguments
?argument
?commandArgs
data <- sample(c(0:10),18498,replace=TRUE)
data1 <- c(1:18498)
mat = cbind(sample(1:30), sample(1:30), 10*rnorm(30,mean=5))
n = 255
data_seq = seq(min(mat[,3]), max(mat[,3]), length=n)
col_pal = colorRampPalette(c('darkblue','orange'))(n+1)
cols = col_pal[ cut(mat[,3], data_seq, include.lowest=T) ]
plot(mat[, 1:2], col = cols, pch=16, cex=2)
View(mat)
library(fields)
two.colors(n=256, start='red', end='blue', middle='black')
levelplot(t(m), scales=list(tick.number=0), xlab=" ", ylab=" ",
colorkey=list(at=as.numeric(factor(c(seq(from=range[1], to=range[2],
by=.1)))),labels=as.character(c( "327.1", "327.2", "327.3", "327.4", "327.5", "327.6",
"327.7", "327.8", "327.9"))),col.regions = two.colors(n=256, start='red', end='blue',
middle='black'), main=main)
?gradient.rect
install.packages("gradient.rect")
gradient.rect(4,0,6,6,c(seq(0,1,length=10),rep(1,10)),
c(rep(1,10),seq(1,0,length=10)),c(0,0),gradient="y")
library(gradient.rect)
library("gradient.rect")
color.gradient <- function(x, colors=c("red","yellow","green")) {
lux <- length(unique(x))
if(lux<15){
lx <- length(x)
choose <- apply(
abs( matrix( rep(x,lux),ncol=lx,byrow=TRUE) -
matrix( rep(seq(min(x),max(x), length.out=lux),lx), ncol=lx ) ) ,
2, function(x)which(x==min(x))[1] )
return( colorRampPalette(colors) (lux) [ choose ] )
} else {
return( colorRampPalette(colors) (lux) [ findInterval(x, seq(min(x),max(x), length.out=lux)) ] )
}
}
lux <- length(unique(x))
if(lux<15){
lx <- length(x)
choose <- apply(
abs( matrix( rep(x,lux),ncol=lx,byrow=TRUE) -
matrix( rep(seq(min(x),max(x), length.out=lux),lx), ncol=lx ) ) ,
2, function(x)which(x==min(x))[1] )
return( colorRampPalette(colors) (lux) [ choose ] )
} else {
return( colorRampPalette(colors) (lux) [ findInterval(x, seq(min(x),max(x), length.out=lux)) ] )
}
}
color.gradient <- function(x, colors=c("red","yellow","green")) {
# Create Color Gradient for a given vector x with given colors.
#
# The function creates a color function with colorRampPalette().
# Then it hands over the number of unique elements of x into this function()().
# From the result of the function()()[ ] only these elements are picked which are most similar to the values in the sequence min(x) to max(x)
# If length(unique(x)) is relatively small (<15) it is done in a computation intensive matter in order to to achieve better results.
# Else it is done with findInterval() which is much faster.
# Example found in the internet: http://stackoverflow.com/questions/18827214/one-colour-gradient-according-to-value-in-column-scatterplot-in-r
lux <- length(unique(x))
if(lux<15){
lx <- length(x)
choose <- apply(
abs( matrix( rep(x,lux),ncol=lx,byrow=TRUE) -
matrix( rep(seq(min(x),max(x), length.out=lux),lx), ncol=lx ) ) ,
2, function(x)which(x==min(x))[1] )
return( colorRampPalette(colors) (lux) [ choose ] )
} else {
return( colorRampPalette(colors) (lux) [ findInterval(x, seq(min(x),max(x), length.out=lux)) ] )
}
}
dat <- read.delim(text='"value"; "avg.sal"; "avg.temp"
2,5698; 34,27254; 4,44
5,4361; 34,30686; 4,64
2,27; 34,3538; 8,05
5,6015; 34,50136; 5,01
2,27; 34,37596; 7,4"', sep=";", dec=",")
x <- dat[,"value"]; length(unique(x))
plot(rep(1, length(x)), y=x, col=color.gradient(x), pch=19,cex=3)
x <- c(x, 10); length(unique(x))
plot(rep(1, length(x)), y=x, col=color.gradient(x), pch=19,cex=3)
x <- c(x, 10 , 20); length(unique(x))
plot(rep(1, length(x)), y=x, col=color.gradient(x), pch=19,cex=3)
x <- c(1,1,1,1,1,1.2,2,2.2,5,6.5,8,8.6,10,10); length(unique(x))
plot(rep(1, length(x)), y=x, col=color.gradient(x), pch=19,cex=3)
x <- c(1,1,1.1,1.2,1,1.3,2,2.2,5,5.1,5.2,5.3,5.4,6.5,8,8.6,10,10); length(unique(x))
plot(rep(1, length(x)), y=x, col=color.gradient(x), pch=19,cex=3)
View(dat)
update.packages(checkBuilt=TRUE)
library(devtools)
library(harbin)
harbin.quant()
install.packages("devtools")
library(devtools)
install.packages("devtools")
install_github("tpepler/harbin")
library(devtools)
library(harbin)
harbin.quant()
install.packages("Rcmdr", dependencies = TRUE)
library(Rcmdr)
install.packages("lme4")
library(Rcmdr)
install.packages("Rcmdr", dependencies = TRUE)
library(Rcmdr)
install.packages("Rcmdr")
install.packages("sushi")
source("https://bioconductor.org/biocLite.R")
biocLite("Sushi")
source("https://bioconductor.org/biocLite.R")
install.packages("fgui")
capture.output(getAnywhere('harbin.quant'), file='source_harbin.quant.r')
library(harbin)
capture.output(getAnywhere('harbin.quant'), file='source_harbin.quant.r')
library(edgeR)
a<-matrix(nrow=100,ncol=3,data=runif(300,max=2))
b<-matrix(nrow=100,ncol=3,data=runif(300,max=1))
colnames(a)<-c("case 1","case 2","case 3")
colnames(b)<-c("case 1","case 2","case 3")
a<-matrix(nrow=100,ncol=3,data=runif(300,max=2))
b<-matrix(nrow=100,ncol=3,data=runif(300,max=1))
colnames(a)<-c("case 1","case 2","case 3")
colnames(b)<-c("case 1","case 2","case 3")
boxplot(a, at = 0:2*3 + 1, xlim = c(0, 9), ylim = range(a, b), xaxt = "n")
boxplot(b, at = 0:2*3 + 2, xaxt = "n", add = TRUE)
axis(1, at = 0:2*3 + 1.5, labels = colnames(a), tick = TRUE)
?boxplot
b<-matrix(nrow=100,ncol=3,data=runif(300,max=1))
a<-matrix(nrow=100,ncol=3,data=runif(300,max=2))
b<-matrix(nrow=100,ncol=3,data=runif(300,max=1))
c<-matrix(nrow=100,ncol=3,data=runif(300,max=2))
d<-matrix(nrow=100,ncol=3,data=runif(300,max=1))
e<-matrix(nrow=100,ncol=3,data=runif(300,max=2))
f<-matrix(nrow=100,ncol=3,data=runif(300,max=1))
g<-matrix(nrow=100,ncol=3,data=runif(300,max=2))
h<-matrix(nrow=100,ncol=3,data=runif(300,max=1))
i<-matrix(nrow=100,ncol=3,data=runif(300,max=2))
j<-matrix(nrow=100,ncol=3,data=runif(300,max=1))
a<-matrix(nrow=100,ncol=2,data=runif(300,max=2))
b<-matrix(nrow=100,ncol=2,data=runif(300,max=1))
colnames(a)<-c("case 1","case 2")
colnames(b)<-c("case 1","case 2")
a<-matrix(nrow=100,ncol=10,data=runif(300,max=2))
b<-matrix(nrow=100,ncol=10,data=runif(300,max=1))
colnames(a)<-c("case 1","case 2")
colnames(b)<-c("case 1","case 2")
a<-matrix(nrow=100,ncol=10,data=runif(300,max=2))
b<-matrix(nrow=100,ncol=10,data=runif(300,max=1))
colnames(a)<-c("case 1","case 2","case 3","case 4","case 5","case 6","case 7","case 8","case 9","case 10")
colnames(b)<-c("case 1","case 2","case 3","case 4","case 5","case 6","case 7","case 8","case 9","case 10")
boxplot(a, at = 0:2*10 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:2*3 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:2*20 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
View(a)
boxplot(a, at = 0:10*3 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:20*3 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(b, at = 0:10*3 + 2, xaxt = "n", add = TRUE)
boxplot(b, xaxt = "n", add = TRUE)
boxplot(a, at = 0:2*10 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
View(a)
boxplot(a, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:2*10 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:10*2 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:10 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:9 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:2*3 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:2*4.5 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:2*9 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 1:10 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:1*9 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:9*3 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:10*3 + 1, xlim = c(0, 22), ylim = range(a, b), xaxt = "n")
boxplot(a, at = 0:9*3 + 1, xlim = c(0, 50), ylim = range(a, b), xaxt = "n")
boxplot(b, at = 0:9*3 + 2, xaxt = "n", add = TRUE)
axis(1, at = 0:2*3 + 1.5, labels = colnames(a), tick = TRUE)
axis(1, at = 0:9*3 + 1.5, labels = colnames(a), tick = TRUE)
boxplot(a, at = 0:9*4 + 1, xlim = c(0, 50), ylim = range(a, b), xaxt = "n")
boxplot(b, at = 0:9*4 + 2, xaxt = "n", add = TRUE)
axis(1, at = 0:9*3 + 1.5, labels = colnames(a), tick = TRUE)
boxplot(a, at = 0:9*6 + 1, xlim = c(0, 50), ylim = range(a, b), xaxt = "n")
boxplot(b, at = 0:9*6 + 2, xaxt = "n", add = TRUE)
axis(1, at = 0:9*6 + 1.5, labels = colnames(a), tick = TRUE)
boxplot(a, at = 0:9*3 + 1, xlim = c(0, 50), ylim = range(a, b), xaxt = "n")
boxplot(b, at = 0:9*3 + 2, xaxt = "n", add = TRUE)
axis(1, at = 0:9*3 + 1.5, labels = colnames(a), tick = TRUE)
a<-matrix(nrow=100,ncol=10,data=runif(300,max=2))
b<-matrix(nrow=90,ncol=10,data=runif(300,max=1))
colnames(a)<-c("case 1","case 2","case 3","case 4","case 5","case 6","case 7","case 8","case 9","case 10")
colnames(b)<-c("case 1","case 2","case 3","case 4","case 5","case 6","case 7","case 8","case 9","case 10")
boxplot(a, at = 0:9*3 + 1, xlim = c(0, 50), ylim = range(a, b), xaxt = "n")
boxplot(b, at = 0:9*3 + 2, xaxt = "n", add = TRUE)
axis(1, at = 0:9*3 + 1.5, labels = colnames(a), tick = TRUE)
a<-matrix(nrow=100,ncol=10,data=runif(300,max=2))
b<-matrix(nrow=90,ncol=9,data=runif(300,max=1))
colnames(a)<-c("case 1","case 2","case 3","case 4","case 5","case 6","case 7","case 8","case 9","case 10")
colnames(b)<-c("case 1","case 2","case 3","case 4","case 5","case 6","case 7","case 8","case 9","case 10")
boxplot(a, at = 0:9*3 + 1, xlim = c(0, 50), ylim = range(a, b), xaxt = "n")
boxplot(b, at = 0:9*3 + 2, xaxt = "n", add = TRUE)
axis(1, at = 0:9*3 + 1.5, labels = colnames(a), tick = TRUE)
len(b)
length(b)
ncol(b)
n=ncol(b)
a<-matrix(nrow=100,ncol=10,data=runif(300,max=2))
b<-matrix(nrow=90,ncol=9,data=runif(300,max=1))
colnames(a)<-c("case 1","case 2","case 3","case 4","case 5","case 6","case 7","case 8","case 9","case 10")
colnames(b)<-c("case 1","case 2","case 3","case 4","case 5","case 6","case 7","case 8","case 9","case 10")
boxplot(a, at = 0:9*3 + 1, xlim = c(0, 50), ylim = range(a, b), xaxt = "n")
boxplot(b, at = 0:n*3 + 2, xaxt = "n", add = TRUE)
axis(1, at = 0:9*3 + 1.5, labels = colnames(a), tick = TRUE)
library(RGtk2)
install.packages("RGtk2")
library(RGtk2)
library(RGtk2)
demo(appWindow)
demo(package="RGtk2")
win = gtkWindow()
da = gtkDrawingArea()
win$add(da)
asCairoDevice(da)
install.packages("cairoDevice")
install.packages("rggobi")
tt <- tktoplevel()
install.packages("tk")
library(tcltk)
tt <- tktoplevel()
tkwm.title(tt,"Harbin.GUI")
topMenu <- tkmenu(tt)
tkconfigure(tt,menu-topMenu)
tkconfigure(tt,menu=topMenu)
fileMenu <- tkmenu(topMenu,tearoff=FALSE)
openMenu <- tkmenu(topMenu,tearoff=FALSE)
tkadd(openMenu,"command",label=".csv file")
tkadd(openMenu,"command",label="xls file", command=getXls)
tkadd(openMenu,"command",label="text file"
)
install.packages("e1071")
install.packages("ineq")
# Create window
window = gtkWindow()
# Add title
window["title"] = "Standard statistics for numerical variables"
# Add a frame
frame = gtkFrameNew("Specify data location...")
window$add(frame)
# Create vertical container for file name entry
vbox = gtkVBoxNew(FALSE, 8)
vbox$setBorderWidth(24)
frame$add(vbox)
# Add horizontal container for every widget line
hbox = gtkHBoxNew(FALSE, 8)
vbox$packStart(hbox, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("_File name")
hbox$packStart(label,FALSE,FALSE,0)
# Add entry in the second column; named "filename"
filename = gtkEntryNew()
filename$setWidthChars(50)
label$setMnemonicWidget(filename)
hbox$packStart(filename,FALSE,FALSE,0)
# Add an horizontal container to specify input file options
# are headers included in the file?
hbox = gtkHBoxNew(FALSE,8)
vbox$packStart(hbox, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("_Headers?")
hbox$packStart(label,FALSE,FALSE,0)
headersEntry = gtkCheckButton()
headersEntry$active = TRUE
hbox$packStart(headersEntry,FALSE,FALSE,0)
label$setMnemonicWidget(headersEntry)
# are headers included in the file?
label = gtkLabelNewWithMnemonic("Col. _Separator?")
hbox$packStart(label,FALSE,FALSE,0)
sepEntry = gtkEntryNew()
sepEntry$setWidthChars(1)
sepEntry$setText(",")
hbox$packStart(sepEntry,FALSE,FALSE,0)
label$setMnemonicWidget(sepEntry)
# what's the character used for decimal points?
label = gtkLabelNewWithMnemonic("_Dec. character?")
hbox$packStart(label,FALSE,FALSE,0)
decEntry = gtkEntryNew()
decEntry$setWidthChars(1)
decEntry$setText(".")
hbox$packStart(decEntry,FALSE,FALSE,0)
label$setMnemonicWidget(decEntry)
# Add separator
vbox$packStart(gtkHSeparatorNew(), FALSE, FALSE, 0)
# Add two horizontal containers to check if the results have to be exported in a file and if so, to specify the file's name
hbox = gtkHBoxNew(FALSE,8)
vbox$packStart(hbox, FALSE, FALSE, 0)
label = gtkLabelNewWithMnemonic("Save _Results?")
hbox$packStart(label,FALSE,FALSE,0)
toSave = gtkCheckButton()
hbox$packStart(toSave,FALSE,FALSE,0)
label$setMnemonicWidget(toSave)
label = gtkLabelNewWithMnemonic("_Export file name?")
hbox$packStart(label,FALSE,FALSE,0)
exportFileName = gtkEntryNew()
exportFileName$setWidthChars(50)
exportFileName$setText("outputs")
hbox$packStart(exportFileName,FALSE,FALSE,0)
label$setMnemonicWidget(exportFileName)
label = gtkLabel(".csv")
hbox$packStart(label,FALSE,FALSE,0)
# Add button
the.buttons = gtkHButtonBoxNew()
the.buttons$setBorderWidth(5)
vbox$add(the.buttons)
the.buttons$setLayout("spread")
the.buttons$setSpacing(40)
buttonOK = gtkButtonNewFromStock("gtk-ok")
gSignalConnect(buttonOK, "clicked", performStatistics)
the.buttons$packStart(buttonOK,fill=F)
buttonCancel = gtkButtonNewFromStock("gtk-close")
library(harbin)
showMethods("harbin.quant")
function(harbin.quant())
function(harbin.quant)
>
getAnywhere(harbin.quant)
library(DESeq2)
?"DESeq2-package"
?
?p.adjust
?p.adjust
installed.packages("shiny")
library(car)
?p.adjust
pvals=c(0.00004114,0.00004114,0.00004114)
p.adjust(pvals,"fdr", n=3)
p.adjust(pvals,"BH", n=3)
p.adjust(pvals,"hochberg", n=3)
setwd("~/Desktop/Data_analysis/Harbin/Harbin")
library(shiny)
runApp("Harbin_app_new_RG/")
runApp("Harbin_app_new_RG/")
runApp("Harbin_app_new_RG/")
runApp("Harbin_app_new_RG/")
runApp("Harbin_app_new_RG/")
setwd("~/Desktop/Harbin_biotechnology_letters/Article/Final/Final2/Rebuttle/Data_analysis")
datavec <- read.csv("Normalised_GOI_1.csv")
convergence.plot<-function(datavec, plotmain){
# datavec: vector of normalised GOI values
nGOIvals<-length(datavec)
nbounds<-7
boundvals<-quantile(datavec,probs=c(0.2,0.4,0.6,0.8),na.rm=TRUE)
d<-density(datavec,na.rm=TRUE)
histplot_f <- function(){
plot(d,main=plotmain,xlab="Concentration ratio (CR)",xlim=c(0,max(d$x)))
lines(d,lwd=2)
polygon(d,col="darkgrey")
for(i in 1:nbounds){
abline(v=boundvals[i],lty=3)
}}
histplot <- histplot_f()
return(histplot)
}
convergence.plot<-function(datavec, plotmain){
# datavec: vector of normalised GOI values
nGOIvals<-length(datavec)
nbounds<-7
boundvals<-quantile(datavec,probs=c(0.2,0.4,0.6,0.8),na.rm=TRUE)
d<-density(datavec,na.rm=TRUE)
histplot_f <- function(){
plot(d,main=plotmain,xlab="Concentration ratio (CR)",xlim=c(0,max(d$x)))
lines(d,lwd=2)
polygon(d,col="darkgrey")
for(i in 1:nbounds){
abline(v=boundvals[i],lty=3)
}}
histplot <- histplot_f()
return(histplot)
}
datavec <- read.csv("Normalised_GOI_1.csv")
convergence.plot(datavec, "Data set 1")
convergence.plot("datavec", "Data set 1")
datavec1 <- datavec[,4]
convergence.plot(datavec1, "Data set 1")
datavec <- read.csv("Normalised_GOI_2.csv")
datavec1 <- datavec[,4]
convergence.plot(datavec1, "Data set 2")
datavec <- read.csv("Normalised_GOI_3.csv")
datavec1 <- datavec[,4]
convergence.plot(datavec1, "Data set 3")
datavec <- read.csv("New_database1.csv")
datavec1 <- datavec[,4]
convergence.plot(datavec1, "Combined data set 1")
datavec <- read.csv("New_database2.csv")
datavec1 <- datavec[,4]
convergence.plot(datavec1, "Combined data set 2")
runApp("Harbin_app_new_RG/")
setwd("~/Desktop/Data_analysis/Harbin/Harbin")
runApp("Harbin_app_new_RG/")
setwd("~/Desktop/Data_analysis/Harbin/Harbin_on_github/Harbin")
runApp("Harbin_app_new_RG/")
runApp("Harbin_app_new_RG/")
setwd("~/Desktop/Data_analysis/Harbin/Harbin_on_github/Harbin")
runApp("Harbin_app_new_RG/")
runApp("Harbin_app_new_RG/")
library(rsconnect)
deployApp("Harbin_app_new_RG/")
